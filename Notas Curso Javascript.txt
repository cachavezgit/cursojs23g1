Curso Javascript

Lunes 4Sep23
Visual Studio Code, Sublime, Atom, Notepad++
	Visual Studio Code (IDE)
	https://code.visualstudio.com/docs/?dv=win64user
Node JS
	node-v18.17.1-x64 (LTS - Long Term Support)
	node -v
Chrome

	Javascript
		Origen 		1995
		Estandarizado	2000
	AJAX 2005/2006
	jQuery 2007 https://jquery.com/download/
	NodeJS 2014  --> Server Side Code (APIs) https://nodejs.org/en/download
	React Native --> Cross Platform Mobile Apps (Android/iOS) https://reactnative.dev/
	Electron ------> Desktop Apps https://www.electronjs.org/
	Angular/React/VueJS/Svelte---> Modern Web App Development (TypeScript)
		ECMAScript 6 2015

Javascript no es un compilado es interpretado

Se conviene usar el ECMAScript 6 (2015) como el estandar para el codigo que generemos
https://www.w3schools.com/js/js_es6.asp

El nivel se soporte de Javascript preocupa a nivel del motor de ejecución a usar (Browser, NodeJS)

var mensaje = "Hola Mundo";
console.log(mensaje);

	node holamundo.js

Chrome V8 is a JavaScript engine, which means that it executes JavaScript code. 
Originally, JavaScript was written to be executed by web browsers. 
Chrome V8, or just V8, can execute JavaScript code either within or outside of a browser, 
which makes server-side scripting possible.

minificador de javascript -------> .min.js

	"Vanilla" JS  ----> Puro Javascript sin librerías


const prompt = require('prompt-sync');  ----> declarar una libreria externa

	npm install prompt-sync <------ instala la libreria en el proyecto
	npm install prompt-sync@4.1.5

package.json

{
  "dependencies": {
    "prompt-sync": "^4.1.5" <---- Funciona sin módulos de Javascript en la linea de comandos
  }
}

npm install

var nombre = prompt("Escribe tu nombre:");   -----> no funciona prompt en linea de comando
console.log(`Hola, ${nombre}. Bienvenido`); <------ interpolando el valor del nombre dentro de la cadena
							IMPORTANTE: SOLO FUNCIONA CON BACKTICKS ``

vbscript Microsoft
perlscript 

'use strict';  <------- forza la declaración de variables

	var de toda la vida se ha usado para declarar variables. Javascript es un lenguaje no typed
	var utiliza global scope

let y const de ES6 (2015) variables y constantes block scope
	let ----> block scope	

JAVASCRIPT ES UN LENGUAJE NO TIPEADO UNTYPED LANGUAGE

JavaScript has seven primitives: String, Number, BigInt, Boolean, Symbol, undefined, and null

	typeof(variable)

String 
	""	comillas dobles
	''	comillas sencillas
	``	backticks -> String template con interpolacion de cadenas
			let mensaje = `Hola, ${nombre}, ${direccion}, ${telefono}.`;

Number

BigInt

Martes 5Sep23

Boolean

Symbol
	ES6 
		Son valores unicos no comparables entre sí ni por igualdad (==) ni por identidad (===)

			== solo compara el contenido de las variables
			=== compara el contenido y el tipo de datos de las variables

undefined

null

Funciones de conversion
	Number()  Si no puede devuelve NaN
	String()
	Boolean() Si la variable que se convierte tiene contenido devuelve true, undefined, null, "" devuelve false


	EJERCICIO:
	Aritmetico.html
	Aritmetico.js

		prompt para pedir dos numeros y asegurar que nos hayan proporcionado dos numeros

			-> Mandar un mensaje de error a console.log si los valores obtenidos no son numeros

				NaN

			-> Devolver el resultado en console.log de las 4 operaciones aritméticas básicas

Miércoles 6Sep23

• if and if else statements
• else if statements
• Conditional ternary operators
• switch statements

let rain = true;
if(rain){
console.log("** Taking my umbrella when I need to go outside **");
} else {
console.log("** I can leave my umbrella at home **");
}

if (age < 3) {
    cost = 0;
    message = "Access is free under three.";
} else if (age >= 3 && age < 12) {
    cost = 5;
    message = "With the child discount, the fee is 5 dollars";
} else if (age >= 12 && age < 65) {
    cost = 10;
    message = "A regular ticket costs 10 dollars.";
} else {
    cost = 7;
    message = "A ticket is 7 dollars.";
}

TERNARY OPERATOR

condicion ? _____ : _______;

nivel = 90;
let acceso = "";
if (nivel >=50) {
    acceso = "Access granted";
} else {
    acceso = "Access denied";
}

acceso = nivel >= 50? "Access granted" : "Access denied";

switch(expression) {
case value1:
// code to be executed
break;
case value2:
// code to be executed
break;
case value-n:
// code to be executed
break;
}

	EJERCICIO: 	DiasMeses.js
			let mes = "marzo"

			switch

			Marzo tiene 31 días

Practice exercise 4.5
1. Create a variable called prize and use a prompt to ask the user to set the
value by selecting a number between 0 and 10
2. Convert the prompt response to a number data type
3. Create a variable to use for the output message containing the value "My
Selection: "
4. Using the switch statement (and creativity), provide a response back
regarding a prize that is awarded depending on what number is selected
5. Use the switch break to add combined results for prizes
6. Output the message back to the user by concatenating your prize variable
strings and the output message string

LOOPS

• while loop
• do while loop

• for loop
• for in
• for of loop

foreach <---- lamdba functions

• while loop
• do while loop

// Array de nombres
let nombres = ["Juan","Pedro","Maria"];
let frutas = ["Manzana","Pera","Banana"];

let nombre = 4;
while (nombre < nombres.length) {
    console.log(nombres[nombre]);
    nombre++;
}

fruta = 4;
do {
    console.log(`Fruta: ${frutas[fruta]}`);
    fruta++;
} while (fruta < frutas.length);

• for loop
• for in
• for of loop

for (initialize variable; condition; statement) {
	// code to be executed
}

for (let i=0; i < 50; i++) { 
    secuencia.push(i);
}

[
  { numero: 1, esPar: false },
  { numero: 2, esPar: true }, 
  { numero: 3, esPar: false },
  { numero: 4, esPar: true }, 
  { numero: 5, esPar: false },
  { numero: 6, esPar: true }, 
  { numero: 7, esPar: false },
  { numero: 8, esPar: true }, 
  { numero: 9, esPar: false } 
]

	Arrays   []

	Objects  {}


const fs = require('fs');  <------- Libreria de file system de NodeJS
let frutas = [];

let frutasCSV = fs.readFileSync('C:\\Users\\cachavez\\CursoJS\\loops\\frutas.txt', 'utf-8'); <--- En un String lee todo el archivo

for .... of....

	For para recorrer arreglos  .... actua como un foreach

	for(let frutita of frutas){
	    console.log(frutita);
	}


Jueves 7Sep23

break y continue (loops)

FUNCTIONS

	CODE BLOCKS {}
		Tienen su propio "Block Scope"

	VB.NET
		Sub
		Function

	Object Pascal/Delphi
		Procedure
		Function

	public void procesaNumero(int x) {} C, C++, Java, C#
	public List<Clientes> buscaClientes(int claveSucursal) {} C, C++, Java, C#

	JavaScript MANEJA SÓLO FUNCIONES PARA ORGANIZAR EL CÓDIGO
	JavaScript organiza el código Top Down

		function procesaNumero(x) {}
		function buscaClientes(claveSucursal) {}

		HTML DOM (Document)
			click de un boton -----> function()
			mouse events ----------> function()
		HTML Validaciones
			function ()

		jQuery ----> Librería de funciones
		NodeJS ----> Librería de funciones "fs", "prompt-sync"


let numero = 3;

let elevaAlCubo = function(numero) { <---------- FUNCION ANONIMA (Su referencia tiene que existir antes de poderla consumir)
    return numero * numero * numero;
}

console.log(`El cuadrado de ${numero} es: ${elevaAlCuadrado(numero)}`);
console.log(`El cubo de ${numero} es: ${elevaAlCubo(numero)}`);

function elevaAlCuadrado(numero) { <--------- NAMED FUNCTION
    return numero * numero;
}

Los parametros de la funcion pueden ser valores default
function generaNombreCompleto(nombre = '', apellido1 = '', apellido2 = '') {
    return `El nombre completo es: ${nombre} ${apellido1} ${apellido2}`;
}

Arrow Functions

	() => body of the function;

	() => {

	};

	(num1, num2) => {

	};

	const mayorDeDosNumeros = (numero1, numero2) => numero1 > numero2 ? numero1 : numero2; // One-liner en JS
	

"use strict";
let numero = 3;

const elevaAlCubo = function(numero = 0) { 
    console.log(`El numero es : ${numero}`);
    return numero * numero * numero;
};

const mayorDeDosNumeros = (numero1, numero2) => numero1 > numero2? numero1 : numero2;
const promedioDelArray = (array) => array.reduce((suma, numero) => suma + numero, 0)/array.length;

console.log(`El cuadrado de ${numero} es: ${elevaAlCuadrado(numero)}`);
console.log(`El cubo de ${numero} es: ${elevaAlCubo(numero)}`);

console.log(generaNombreCompleto());
elevaAlCubo();

console.log(`El mayor de 5 y 3 es: ${mayorDeDosNumeros(5, 3)}`);

console.log(`El promedio de los numeros es: ${promedioDelArray([1,4,8,9,8])}`);

function elevaAlCuadrado(numero) {
    return numero * numero;
}

function generaNombreCompleto(nombre = '', apellido1 = '', apellido2 = '') {
    return `El nombre completo es: ${nombre} ${apellido1} ${apellido2}`;
}

const arrayNombres = ["Juan", "Pedro", "Maria"];

arrayNombres.forEach(function (nombre) { 
    console.log(nombre);
});

arrayNombres.forEach((nombre) => {
    console.log(nombre);
});


CODIGO JAVA JAVA >=5  "VarArgs"
public String formatWithVarArgs(String... values) {
    // ...
}
formatWithVarArgs();

formatWithVarArgs("a", "b", "c", "d");
formatWithVarArgs("a", "b", "c");

EJERCICIO
		Crear el archivo numeros.txt con 10 lineas con numeros al azar

		6,4,5,6,3,5,64,456,456 \r\n
		6,4,2,5,7,5,4,32,6,7
		...
		
		Leer el contenido del archivo en arreglos

		Calcular el promedio, el valor minimo y el valor maximo de todos los numeros

Viernes 8Sep23

function nombre() {
				-----------> 1995
}

const mifuncion = function() {
				-----------> ES5 (2009)
};

const funcionFlecha = () => {
				-----------> ES6 (2015)
};

const mayorDeDosNumeros = (numero1, numero2) => numero1 > numero2? numero1 : numero2;

const promedioDelArray = (array) => array.reduce((suma, numero) => suma + numero, 0)/array.length;

const validaElementsDelArreglo = (arreglo, condicion) => arreglo.every(elemento => condicion(elemento));

Scoping

Variable scope ---> Cuanto tiempo permanece accesible la variable/Dónde podemos accesar una variable

	var -> function scoped
		no importa en qué parte de una función se declare, será válida para toda la función.
	
	let -> block scoped
		serán válidas solo en el bloque {} en el que se estan declarando
		IMPORTANTE: A DIFERENCIA DE VAR SE TIENEN QUE DECLARAR ANTES DE QUE SE PUEDAN USAR

SE RECOMIENDA COMO BUENA PRACTICA EVITAR NO DECLARAR VARIABLES CON LET O CONST. SE DEBE CONSIDERAR CUIDADOSAMENTE
	CADA VARIABLE QUE SE DEFINA CUANTO TIEMPO DEBE VIVIR, ES DECIR QUIENES LA PUEDEN ACCESAR (VARIABLES Y CONSTANTES)

DE NO HACERLO JAVASCRIPT USA "HOISTING" PARA ELEVAR LA VARIABLE AL ALCANCE MÁS ALTO EN EL CONTEXTO EN EL QUE SE USE
	LA VARIABLE.

"use strict";	------> NO HABRÁ HOISTING EN ESE ARCHIVO .JS

IIFE
	(() => {
	    console.log("UNO!");    
	    x = "Hola";
	    console.log(x);
	})();

	(function () {
	    console.log("DOS!");
	    console.log(x);
	})();

RECURSIVE FUNCTIONS
	Una funcion que se llama así misma

function getRecursive(nr) {
    console.log(nr);
    if (nr>0)
        getRecursive(--nr);
}
getRecursive(3);
		EJERCICIO: CalcularFactorial.js USANDO recursividad

			prompt ---> numero?
				5! 5x4x3x2x1 = 120

const fac = (n) => n>0 ? n*fac(n-1) : 1;

const factorial = (num) => {
    if (isNaN(num) || num < 0 || num > 100) return;

    if (num === 0) return 1;
    if (num === 1) return 1;

    return num * factorial(num - 1);
}

NESTED FUNCTIONS (CLOSURE)

Closure is a nested function that has access to the parent variables, even after the parent has executed.

	Containing function, parent function, outer function
	Contained function, child function, inner function o nested function <----- CLOSURE

function init() {
    let state = 0;

    const increment = () =>{
        state += 1;
        return state;
    }

    const decrement = function () {
        state -= 1;
        return state;
    }

    increment();
    decrement();

    console.log(`State: ${state}`);
}

EJERCICIO CREAR UN document.html

	<h1> ejemplo1 </h1>
	<h1> ejemplo2 </h1>
	<h1> ejemplo3 </h1>
	<h1> ejemplo4 </h1>

Lunes 11Sep23

Object Oriented Programming

	OOP ----> Paradigma
		Se modelan Classes ---> Abstracción (propiedades y métodos), Encapsulamiento, Herencia

	Reusabilidad de código nos permite extender clases existentes agregandole o modificando comportamientos existentes.

	C++ y Smalltalk son pioneros de la OOP, hoy en día Java y C#

		Java ---> System.out.println()
		C# -----> Console.WriteLine()

	Javascript no usa la OOP obligatoriamente

	Classes en javascript son Templates para crear objetos, permiten homologar la estructura de los objetos similares.

	class Dog2 {
	    constructor (d, w, c, b) {
        	this.dogName = d;
	        this.weight = w;			<------- 4 propiedades 
	        this.color = c;
	        this.breed = b;
	    }
	}

	SyntaxError: A class may only have one constructor

	No hay constructor overloading, sobrecarga de constructores, es decir no puede haber más de 1 constructor por clase.

	Una clase es una plantilla para generar objetos:

		Clase
			----> objetos

					typeof "Object"


class Matematico {
    #num2;  // <--- si es propiedad privada se tienen que agregar la declaración con #

    constructor(num1, num2) {
        if (num1 <0 || num2 <0) {
            console.log("Los numeros no pueden ser negativos");
            return;
        }
        this.num1 = num1;
        this.#num2 = num2;  // <---- campo Private por usar el símbolo #
    }

    suma() {
        return this.num1 + this.#num2;
    }

    resta() {
        return this.num1 - this.#num2;
    }
}

Una propiedad prefijada o definida con _dato = 0 si es protected. Hace sentido para la Herencia de clases.

EJERCICIO Agregar en circulos.js Clase Circulo y agregarle el metodo calculaArea y calculaPerimetro e Imprimir los resultados.
	Definir el diámetro como private

Getters and Setters
	public string mensaje { get; set;};  Java ... C#

HERENCIA
	Padre ---------> Hija
	Superclase ----> Subclase
	Base ----------> Derived	

class Rosa extends Flor {
    constructor(name, color) {
        super(name);	<-------- hace referencia a la superclase
        this.color = color;
    }

    espinar() {
        console.log(`No hay rosa sin espinas...`);
    }
}

En el folder oop, crear el banco.js

	Agregar la clase CuentaBancaria (numero cuenta, titular)
	Agregar la clase Inversion, TdeC subclases de la cuenta bancaria
		Inversion tasaDeInterés, calcularRendimiento()

Method Overrides (Sustituye un método existente por otra implementación, pudiendo llamar la original por medio de super. 

class CuentaBancaria {
    constructor(numeroDeCuenta, titular) {
        this.numeroDeCuenta = numeroDeCuenta;
        this.titular = titular;
    }

    imprimeDetallesCuentaBancaria() {
        console.log(`Numero de cuenta: ${this.numeroDeCuenta}`);
        console.log(`Titular: ${this.titular}`);
    }
}

class CuentaDeInversion extends CuentaBancaria { 
    constructor(numeroDeCuenta, titular, saldo, tasaDeInteres) {
        super(numeroDeCuenta, titular);
        this.saldo = saldo;
        this.tasaDeInteres = tasaDeInteres;
    }

    calcularInteres() { 
        console.log(`Calculando interés con la sasa de interes: ${this.tasaDeInteres}`);
    }

    imprimeDetallesCuentaBancaria () {
        super.imprimeDetallesCuentaBancaria();
        console.log(`Saldo: ${this.saldo}`);
        console.log(`Tasa de interes: ${this.tasaDeInteres}`);
    }

}

class TarjetaDeCredito extends CuentaBancaria { 
    constructor(numeroDeCuenta, titular, limiteDeCredito, fechaDeCorte) {
        super(numeroDeCuenta, titular);
        this.limiteDeCredito = limiteDeCredito;
        this.fechaDeCorte = fechaDeCorte;
    }

    autorizarCompra(monto) {
        if (monto <this.limiteDeCredito) {
            console.log('La compra está autorizada');
        } else {
            console.log('La compra no está autorizada');
        }
    } 

    imprimeDetallesCuentaBancaria() {
        super.imprimeDetallesCuentaBancaria();
        console.log(`Limite de crédito: ${this.limiteDeCredito}`);
        console.log(`Fecha de corte: ${this.fechaDeCorte}`);
    }
}

const cb = new CuentaDeInversion(123456789, 'Juan', 100, 0.01);
const tc = new TarjetaDeCredito(123456789, 'Mar', 100000, new Date());

cb.imprimeDetallesCuentaBancaria();
tc.imprimeDetallesCuentaBancaria();

Martes 12Sep23 (10:30)
OOP en Javascript ---> Typescript
	------> Mobile Apps->RN
	------> Web Apps Web Apis --> NodeJS
	------> Desktop Apps .......> Electron
	------> Angular/React/VueJS/Svelte <--- Frameworks/Libraries

Modules
	------> más menos -> C# (Namespaces y paquetes que se obtienen nuget o que estan en otros proyectos o dll)
	------> más menos -> Packages Java (maven, gradle o que estan en otros jars)

	require 
		const prompt = require('prompt-sync')();

		npm install prompt-sync
			-----------------> node_modules (folder)
	
	Modularidad
		Encapsulamiento de elementos que son privados para el módulo (No son exportables) y públicos.
			variables, funciones, clases

	requiere, ES6 (import, export)

	.js (exporta)
		------> .js (importa)

	const loexportado = require('./exportacion.js');
		más menos using (C#) import (java)

	Extension: Live Server ---> VS Code

	SE PUEDE IMPORTAR Y EXPORTAR CODIGO EN JAVASCRIPT PERO....


		A) SI ES UNA APLICACION TIPO NODE.JS ANGULAR ETC...
		
		   Se exporta así:
	
			module.exports = {suma,elevarAlCuadrado, promedioArray, saludaUsuario, mayorDeLosNumeros};

		   Se importa así:

			const loexportado = require('./exportacion.js');
			const tipos = require('./exportacionclases.js');

		   Se usa así:

			console.log(loexportado.suma(90,87));


		B) SI ES UNA APLICACION WEB (.html y .js y .css)

		   Se exporta así:

			export {longitudDeLaCadena}

		   Se importa así:

			import {longitudDeLaCadena} from "./exportacionweb.js";
			import * as gato from "./exportacionweb.js";

		   Se usa en un HTML así: (NOTA IMPORTANTE, ESTO FUNCIONA SI ACCESAMOS AL HTML por http://webserver/folder/archivo.html

		        <script type="module" src="./importacionweb.js">

		        </script>

Miércoles 13Sep23

Programación Asíncrona con Javascript (Promises)

	Web App ----------> HTTP Request  ----------> Web Server -----> .html, .css, .js
			    HTTP Response <-------------------------------

		AJAX (Actualizaciones parciales) 2004, 2005 ----------------------------> HTTP
				<------------------------------------------------------

	DHTML/DOM (1997, 1998)

	Asynchronous Javascript And XML (2004, 2005)

	jQuery (2006, 2007)

	Node JS (2007-2009)

	Componentes Web (Angular, Vue, React, Svelte, Laravel(*), Django/Flask(*), Spring Web(*),MVC(*)) (2009---->) SPAs (Single Page Applications)

	Normalmente consumimos funcionalidad remota expuesta por otros servicios (propios o de terceros)
		Servidores HTTP remotos, Web Sockets (TCP/IP), Queue Services, Cloud Services (Azure, AWS, Google Cloud),
			Serverless code (Azure Functions, AWS Lambda Functions)

	XmlHttpRequest (AJAX) como punto de partida -------> async await (ES 2017) for await (ES 2018)


	CALLBACKS
		Timers  setTimeout()
			setTimeout(checkForUpdates, 60000);  <---- 60,000 ms o 60 s
			setInterval()
		DOM
			Eventos
			button.addEventListener('click', respondeAlClick);

		File System

		Network Events
			https://rapidapi.com/wirefreethought/api/geodb-cities/pricing

			XmlHttpRequest 
				GET	https://wft-geo-db.p.rapidapi.com/v1/geo/countries

			headers: {
   				'X-RapidAPI-Key': 'SIGN-UP-FOR-KEY',
				'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'
			}

			jQuery $.getJSON $.ajax forma más compacta que el XmlHttpRequest


function obtenPaises() {
    let request = new XMLHttpRequest();

    request.open('GET', 'https://wft-geo-db.p.rapidapi.com/v1/geo/countries');

    request.setRequestHeader('x-rapidapi-host', 'wft-geo-db.p.rapidapi.com');
    request.setRequestHeader('x-rapidapi-key', '05b37d25a6msh52f04c347257d2bp167eb7jsna8e4fd0f7bca');

    request.send();

    request.onload = function () { 
        if (request.status >= 200 && request.status < 400) { 
            let respuesta = JSON.parse(request.responseText);
            console.log(respuesta);
        }
    }

    request.onerror = function (err) { 
        console.log(`Ocurrió un error: ${err.message} ${err.type}`);
    }
}

const fs = require('fs');
let resultado = {};
fs.readFile('C:\\Users\\cachavez\\CursoJS\\jsasyncyajax\\big.txt', 'utf8', (err, data) => { 
    if (err) {
        console.log(`Ocurrio un error al leer el archivo: ${err.message} `);
        return;
    }

    Object.assign(resultado, data);
});
console.log("Finished reading");
console.log(resultado);	

$.ajax({
    dataType: "json",
    url: "https://wft-geo-db.p.rapidapi.com/v1/geo/countries",
    method: "GET",
    headers: { 
        "x-rapidapi-host": "wft-geo-db.p.rapidapi.com",
        "x-rapidapi-key": "05b37d25a6msh52f04c347257d2bp167eb7jsna8e4fd0f7bca"
    },
    async: true,
    success: function(response) { 
        //console.log(response.data);
        response.data.forEach(pais => { 
            //console.log(pais.name);
           $('#paises').append(`<li>${pais.name}</li>`);
        });
    },
    error: function(error) {
        console.log(error.responseJSON);
    }
});

PROMISES
https://medium.com/swlh/understanding-promises-in-javascript-e55511e38134

We all know that javascript is a synchronous programming language but callback 
	functions help to make it an asynchronous programming language.

The Promise the object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.

Pending: You don't know whether you will have time or not.
Fulfilled: You gave them a party
Rejected: You don't give a party to them

	CLIENT							SERVER
		----------> Promises call ---------------> 		Crear Promesa


	fetch(.....api call) ....... Orientado a Promesas

const prom = (partyPromise) => {
    return new Promise((resolve, reject)=>{
        setTimeout(()=>{
            if(partyPromise){
                resolve("I given party to friends");
            }else{
                reject("I am not given party to friends");
            }
        }, 5 * 1000);
    })
}

prom(true).then(success => console.log(`Es exito: ${success}`))
	.catch(error => console.log(`Es fallido: ${error}`)).finally(() => { console.log("I am done"); }); 

fetch -----> API Promise-Style


function ObtenPaisesPromises() {
    fetch('https://wft-geo-db.p.rapidapi.com/v1/geo/countries', {
        "method": "GET",
        "headers": {
            "x-rapidapi-host": "wft-geo-db.p.rapidapi.com",
            "x-rapidapi-key": "05b37d25a6msh52f04c347257d2bp167eb7jsna8e4fd0f7bc"
        }
    }).then((response) => {
        response.json().then((json) => {
            json.data.forEach(pais => {
                console.log(pais.name);
            });
        }).catch((error) => { 
            console.log(`Ocurrio un error al procesar el json: ${error.message}`);
        })
    }).catch((error) => {
        console.log(`Ocurrio un error al obtener las paises: ${error.message}`);
    }).finally(() => {
        console.log('Finalizo');
    });
}

require('fs').promises ---> Variante asíncrona por promesas.

const getPaises = async () => {

    try {
        const response = await fetch('https://wft-geo-db.p.rapidapi.com/v1/geo/countries', {
            "method": "GET",
            "headers": {
                "x-rapidapi-host": "wft-geo-db.p.rapidapi.com",
                "x-rapidapi-key": "05b37d25a6msh52f04c347257d2bp167eb7jsna8e4fd0f7bca"
            }
        });

        console.log(response.status); // <---- revisar si tuvimos un 200

        const jsonResponse = await response.json();

        return jsonResponse.data;
    }
    catch (error) {
        console.log(`Ocurrió un error: ${error.message}`);
    }
    finally {
        console.log('Finalizo');
    }
}

const muestraPaises = async () => {
    const info_paises = await getPaises();
    console.log(typeof info_paises);
    console.log(info_paises);
};

/*$("#ejecutaPaises").on("click", async () => {
    console.log("Ejecutando paises");
    await muestraPaises();
});*/

(async () =>{
    await muestraPaises();
})();

$(document).ready(async () => {
    await muestraPaises();
});

NODE JS

C:\Users\cachavez\CursoJS\node-web-api

	1. Crear un folder para la Node.JS App
	2. npm init
	3. Instalar las dependencias básicas con las que vayamos a trabajar
	4. Web Apps, y Web Apis -----> express <--- dependencia
		npm install express --save
	5. Implementar la funcionalidad


const express = require('express');

const app = express();

app.listen(3000, () => {
    console.log('Server running on port 3000');
});

// Agregar un Endpoint
app.get('/clientes/nombres', (req, res) => {
    const nombres = ['Juan', 'Pedro', 'Maria', 'Javier', 'Ana', 'Luis', 'Juan', 'Pedro', 'Maria', 'Javier'];

    res.json(nombres);
});

si queremos recibir datos en un POST con el body se ocupa:

npm install body-parser --save

var bodyParser = require('body-parser')

app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())


const express = require('express');

const app = express();
app.use(express.json()); // <---- Para poder leer el body en formato JSON

const nombres = [];

app.listen(3000, () => {
    console.log('Server running on port 3000');
});

// Agregar un Endpoint
app.get('/clientes/nombres', (req, res) => {
    res.json(nombres);
});

app.post('/clientes/nombres/agregar', (req, res) => {
    nombres.push(req.body.nombre);
    res.json("Nombre agregado correctamente");
});

Viernes 15Sep23

NodeJS ----> ecosistema de paquetes alrededor
			npm
			yarn

MySQL
	----- Driver para Conectarse a una DB

cursomat (DB)
create table nombres (
	clave int primary KEY AUTO_INCREMENT,
	nombre char(50) null
)

insert into nombres (nombre) values ('Gervasio')
insert into nombres (nombre) values ('Juan')
insert into nombres (nombre) values ('Maria')

select * from nombres

DRIVER PARA MYSQL (NodeJS)
	npm install mysql --save

const mysql = require("mysql");


const db = mysql.createConnection({

    host: "cachavezmysql.mysql.database.azure.com",

    user: "cachavez",

    password: "Pa$$w0rd5678",

    database: "cursomat",

});


db.connect((err) => {

    if (err) {

        throw err;

    }

    console.log("MySql Connected");

});


app.get('/clientes/nombres', (req, res) => {
    let sql = "SELECT * FROM nombres";
    db.query(sql, (err, result) => {
        if (err) throw err;
        console.log(result);
        res.json(result);
    });
});

app.post('/clientes/nombres/agregar', (req, res) => {
    let nombre = req.body.nombre;
    let sql = "INSERT INTO nombres (nombre) VALUES (?)";
    db.query(sql, [nombre], (err, result) => {
        if (err) throw err;
        console.log(result);
    });
    res.json("Nombre agregado correctamente");
});

TYPESCRIPT
	
	So, what exactly is TypeScript? And how can we use it? 

	Well, it really is as simple as "TypeScript generates JavaScript", to quote Anders Hejlsberg, 
	the designer of the TypeScript language. 

	Wherever we see a use for JavaScript in the modern world, we can generate this JavaScript using TypeScript.

	Tailwind ------> .CSS  (SCSS, ....)

	Typescript ----> Javascript
	 .ts ------------> .js

	npm install -g typescript   <------ -g instalación para cualquier folder (global)

	tsc --version (typescript compiler) Version 5.2.2

		holamundo.ts -----> tsc ------> holamundo.js

       				tsc --init 	=>   tsconfig.json
					"target" : "es2016", 
					"strict" : true

	tsc -w  <------ Watcher que va a estar observando los cambios en el file system y va actualizar los JS

	npm install inquirer --save     7.1.0
	npm install --save @types/inquirer  6.5.0

	npm init -y
	npm install

	

	

    	



	











	

	
